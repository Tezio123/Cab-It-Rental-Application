/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/7.0.108
 * Generated at: 2021-05-20 21:28:37 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.order;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import com.cabit.Cab_It.model.Order;
import java.util.List;
import com.cabit.Cab_It.helper.Gender;
import com.cabit.Cab_It.model.Customer;
import com.cabit.Cab_It.model.Location;
import com.cabit.Cab_It.helper.AccessPrivilegeHelper;
import com.cabit.Cab_It.model.Employee;
import com.cabit.Cab_It.helper.DateTimeHelper;

public final class react_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
        throws java.io.IOException, javax.servlet.ServletException {

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html;charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<html>\r\n");
      out.write("\r\n");
      out.write("\t<head>\r\n");
      out.write("\t    <meta charset=\"UTF-8\">\r\n");
      out.write("\t    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\r\n");
      out.write("\t    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\r\n");
      out.write("\t    <title>Your Orders</title>\r\n");
      out.write("\t    <link rel=\"stylesheet\" href=\"CSS/style3.css\">\r\n");
      out.write("\t    <link rel=\"preconnect\" href=\"https://fonts.gstatic.com\">\r\n");
      out.write("\t    <link href=\"https://fonts.googleapis.com/css2?family=Poppins:ital,wght@0,100;0,200;0,300;0,400;0,500;0,600;0,700;0,800;0,900;1,100;1,200;1,300;1,400;1,500;1,600;1,700;1,800;1,900&display=swap\" rel=\"stylesheet\">\r\n");
      out.write("\t    <link rel=\"preconnect\" href=\"https://fonts.gstatic.com\">    \r\n");
      out.write("\t    <link href=\"https://fonts.googleapis.com/css2?family=Poppins:ital,wght@0,100;0,200;0,300;0,400;0,500;0,600;0,700;0,800;0,900;1,100;1,200;1,300;1,400;1,500;1,600;1,700;1,800;1,900&family=Roboto:ital,wght@0,100;0,300;0,400;0,500;0,700;0,900;1,100;1,300;1,400;1,500;1,700;1,900&display=swap\" rel=\"stylesheet\">\r\n");
      out.write("\t</head>\r\n");
      out.write("\r\n");
      out.write("\t<body>\r\n");
      out.write("\t    ");

	        if(session.getAttribute("logged-employee") == null)
	        {
	            response.sendRedirect("/Cab_It/login");
	            return;
	        }
	        AccessPrivilegeHelper accessPrivilegeHelper = new AccessPrivilegeHelper();
	        Employee loggedEmployee = (Employee) session.getAttribute("logged-employee");
	
	        if (!accessPrivilegeHelper.checkAccessPrivilegesForOrder(loggedEmployee, "read") &&
	            !accessPrivilegeHelper.checkAccessPrivilegesForOrder(loggedEmployee, "update"))
	        {
	            response.sendRedirect("/Cab_It/error/no-access.jsp");
	            return;
	        }
	    
      out.write("\r\n");
      out.write("\t\t\r\n");
      out.write("\t\t<div class=\"head-te\">\r\n");
      out.write("\t\t  \t<h2>Your orders here..</h2>\r\n");
      out.write("\t  \t</div>\r\n");
      out.write("\t    ");

	        if(session.getAttribute("order-accepted-status") != null)
	        {
	            String acceptedStatus = session.getAttribute("order-accepted-status").toString();
	
	            if(acceptedStatus.equals("success")) {
	            	out.println("<div class='head-te'>");
		                out.println("<font color='blue'>");
		                	out.println("<h4>Thank you! Your customer is waiting until your arrival. Good luck :)</h4>");
		                out.println("</font>");
	                out.println("</div>");
	            }
	            else if(acceptedStatus.equals("invalid")) {
	                out.println("<font color='blue'>");
	                out.println("<h4>Sorry! Something went wrong :(</h4>");
	                out.println("</font>");
	            }
	            session.removeAttribute("order-accepted-status");
	        }
	    
      out.write("\r\n");
      out.write("\t\r\n");
      out.write("\t   <div class=\"head-te\">\r\n");
      out.write("\t\t    <h4>Fetching criteria</h4>\r\n");
      out.write("\t\t    <a href=\"/Cab_It/fetch/order?asc\">Requested date time in ASC</a><br>\r\n");
      out.write("\t\t    <a href=\"/Cab_It/fetch/order\">Requested date time in DESC</a>\r\n");
      out.write("\t    </div>\r\n");
      out.write("\t\r\n");
      out.write("\t    ");

	        List<Order> orders = (List<Order>) session.getAttribute("orders");
	
	        DateTimeHelper dateTimeHelper = new DateTimeHelper();
	        String titleTemplate = "<h3>%s</h3>";
	        String fieldTemplate = "<p> <b> %s </b>  : %s </p>";
	
	        for(Order order : orders)
	        {
	            Customer customer = order.getCustomer();
	            Location fromLocation = order.getFromLocation();
	            Location toLocation = order.getToLocation();
	
	            customer.setDerivedAttributes();
	
	            String customerFirstname = customer.getFirstName();
	            String customerLastname = customer.getLastName();
	            String phone = customer.getPhone();
	            String namePrefix = customer.getGender().equals(Gender.MALE) ?
	                    "Mr." : "Mrs.";
	            String fullName = namePrefix
	                    .concat(customerFirstname)
	                    .concat(" ")
	                    .concat(customerLastname);
	
	            String fromLocationDistrict = fromLocation.getDistrict();
	            String toLocationDistrict = toLocation.getDistrict();
	            String requestedOn =  order.getRequestedDateTime().toString();
	            String requestedDateTime = "On: ".concat(dateTimeHelper.formatDateTimeStr(requestedOn));
	            String review = order.getReview() == null ? "" : order.getReview();
	
	            out.println("<div class='row'>");
	            	out.println("<div class='column'>");
	            		out.println("<div class='card'>");
	            			out.println("<div class='container'>");
	            				out.println(String.format(titleTemplate, requestedDateTime));
	            				out.println(String.format(fieldTemplate, "Customer name", fullName));
	           					out.println(String.format(fieldTemplate, "Customer contact", phone));
	            				out.println(String.format(fieldTemplate, "Journey start", fromLocationDistrict));
	           					out.println(String.format(fieldTemplate, "Journey end", toLocationDistrict));
	            				out.println(String.format(fieldTemplate, "Review", review));
	
	            				out.println("<form action='/Cab_It/react/order' method='POST'>");
	
						            out.println(String.format("<input type='text' hidden='true' value='%s' name='customer-id'>", order.getCustomer().getId()));
						            out.println(String.format("<input type='text' hidden='true' value='%s' name='vehicle-id'>", order.getVehicle().getId()));
						            out.println(String.format("<input type='text' hidden='true' value='%s' name='from-location-id'>", order.getFromLocation().getId()));
						            out.println(String.format("<input type='text' hidden='true' value='%s' name='to-location-id'>", order.getToLocation().getId()));
						            out.println(String.format("<input type='text' hidden='true' value='%s' name='req-date-time'>", order.getRequestedDateTime()));
	
						            out.println("<input type='submit' value='Accept' name='accepted' id='signup-btn-6'>");
						            out.println("<input type='submit' value='Decline' name='declined' id='signup-btn-7'>");
	
	            				out.println("</form>");
	            			out.println("</div>");
	            		out.println("</div>");
	            	out.println("</div>");
	            out.println("</div>");
	        }
	    
      out.write("\r\n");
      out.write("\t\r\n");
      out.write("\t    <form action=\"/Cab_It/dashboard\">\r\n");
      out.write("\t        <input type=\"submit\" value=\"Dashboard\" id=\"signup-btn-1\">\r\n");
      out.write("\t    </form>\r\n");
      out.write("\t\r\n");
      out.write("\t</body>\r\n");
      out.write("\r\n");
      out.write("</html>\r\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
